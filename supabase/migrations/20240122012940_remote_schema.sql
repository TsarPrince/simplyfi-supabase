
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."content_type" AS ENUM (
    'POLL',
    'METRIC',
    'ANNOUNCEMENT',
    'DISCUSSION',
    'INFORMATION'
);

ALTER TYPE "public"."content_type" OWNER TO "postgres";

CREATE TYPE "public"."day" AS ENUM (
    'SUN',
    'MON',
    'TUE',
    'WED',
    'THU',
    'FRI',
    'SAT'
);

ALTER TYPE "public"."day" OWNER TO "postgres";

CREATE TYPE "public"."status" AS ENUM (
    'PUBLISHED',
    'DRAFT',
    'ARCHIVE'
);

ALTER TYPE "public"."status" OWNER TO "postgres";

CREATE TYPE "public"."symbol" AS ENUM (
    'DOLLAR',
    'PERCENTAGE'
);

ALTER TYPE "public"."symbol" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS trigger
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."notify_users_on_poll_update"() RETURNS trigger
    LANGUAGE "plpgsql" SECURITY DEFINER
    SET "search_path" TO 'public'
    AS $$
DECLARE
  new_poll_title TEXT;
  user_email RECORD;
BEGIN
  SELECT title INTO new_poll_title FROM poll WHERE id = NEW.id;

  -- Fetch all user emails
  FOR user_email IN (SELECT email FROM auth.users) LOOP
    -- -- Call the Supabase edge function to send email
    -- PERFORM http('POST', 'https://wszcwxoobpiexzcvxisj.supabase.co/functions/v1/send-email', json_build_object(
    --   'to', user_email,
    --   'subject', 'Update from SimplyFi!',
    --   'title', new_poll_title
    -- )::TEXT);

    -- Publish the metric value to a channel
    PERFORM pg_notify('poll_inserted', '{"to": ' || user_email || ', "subject": "Update from SimplyFi!", "title": ' || new_poll_title || '}');

  END LOOP;

  RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."notify_users_on_poll_update"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."comment" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "title" text NOT NULL,
    "discussion_id" bigint NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."comment" OWNER TO "postgres";

ALTER TABLE "public"."comment" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Comment_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."discussion" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "title" text NOT NULL,
    "content" text,
    "status" public.status DEFAULT 'DRAFT'::public.status NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."discussion" OWNER TO "postgres";

ALTER TABLE "public"."discussion" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Discussion_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."announcement" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "title" text NOT NULL,
    "content" text,
    "user_id" uuid
);

ALTER TABLE "public"."announcement" OWNER TO "postgres";

ALTER TABLE "public"."announcement" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."announcement_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."comment_like" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "comment" bigint NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."comment_like" OWNER TO "postgres";

ALTER TABLE "public"."comment_like" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."comment_like_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."comment_spam" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "comment" bigint NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."comment_spam" OWNER TO "postgres";

ALTER TABLE "public"."comment_spam" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."comment_spam_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."information" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "image" text,
    "title" text NOT NULL,
    "content" jsonb,
    "flag" boolean DEFAULT false NOT NULL,
    "status" public.status DEFAULT 'DRAFT'::public.status NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."information" OWNER TO "postgres";

ALTER TABLE "public"."information" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."information_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."metric" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "name" text NOT NULL,
    "description" text NOT NULL,
    "symbol" public.symbol,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."metric" OWNER TO "postgres";

ALTER TABLE "public"."metric" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."metric_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."metric_value" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "metric" bigint NOT NULL,
    "value" double precision NOT NULL
);

ALTER TABLE "public"."metric_value" OWNER TO "postgres";

ALTER TABLE "public"."metric_value" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."metric_value_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."poll" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "title" text NOT NULL,
    "user_id" uuid NOT NULL
);

ALTER TABLE "public"."poll" OWNER TO "postgres";

ALTER TABLE "public"."poll" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."poll_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."poll_option" (
    "id" bigint NOT NULL,
    "title" text NOT NULL,
    "poll_id" bigint NOT NULL,
    "order" bigint NOT NULL,
    CONSTRAINT "poll_option_title_check" CHECK (((length(title) <> 0) AND (length(title) < 200)))
);

ALTER TABLE "public"."poll_option" OWNER TO "postgres";

ALTER TABLE "public"."poll_option" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."poll_options_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."poll_vote" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "poll_option_id" bigint NOT NULL,
    "user_id" uuid
);

ALTER TABLE "public"."poll_vote" OWNER TO "postgres";

ALTER TABLE "public"."poll_vote" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."poll_votes_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" uuid NOT NULL,
    "full_name" text,
    "avatar_url" text,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ritual" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT now() NOT NULL,
    "day" public.day NOT NULL,
    "content_type" public.content_type NOT NULL,
    "name" text NOT NULL,
    "title" text
);

ALTER TABLE "public"."ritual" OWNER TO "postgres";

ALTER TABLE "public"."ritual" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."ritual_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "Comment_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."discussion"
    ADD CONSTRAINT "Discussion_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."announcement"
    ADD CONSTRAINT "announcement_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."comment_like"
    ADD CONSTRAINT "comment_like_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."comment_spam"
    ADD CONSTRAINT "comment_spam_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."information"
    ADD CONSTRAINT "information_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."metric"
    ADD CONSTRAINT "metric_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."metric_value"
    ADD CONSTRAINT "metric_value_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."poll_option"
    ADD CONSTRAINT "poll_options_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."poll"
    ADD CONSTRAINT "poll_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."poll_vote"
    ADD CONSTRAINT "poll_votes_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."ritual"
    ADD CONSTRAINT "ritual_day_key" UNIQUE ("day");

ALTER TABLE ONLY "public"."ritual"
    ADD CONSTRAINT "ritual_pkey" PRIMARY KEY ("id");

CREATE TRIGGER on_poll_created AFTER INSERT ON public.poll FOR EACH ROW EXECUTE FUNCTION public.notify_users_on_poll_update();

ALTER TABLE ONLY "public"."announcement"
    ADD CONSTRAINT "announcement_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_discussion_id_fkey" FOREIGN KEY (discussion_id) REFERENCES public.discussion(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comment_like"
    ADD CONSTRAINT "comment_like_comment_fkey" FOREIGN KEY (comment) REFERENCES public.comment(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comment_like"
    ADD CONSTRAINT "comment_like_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comment_spam"
    ADD CONSTRAINT "comment_spam_comment_fkey" FOREIGN KEY (comment) REFERENCES public.comment(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comment_spam"
    ADD CONSTRAINT "comment_spam_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."discussion"
    ADD CONSTRAINT "discussion_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."information"
    ADD CONSTRAINT "information_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."metric"
    ADD CONSTRAINT "metric_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."metric_value"
    ADD CONSTRAINT "metric_value_metric_fkey" FOREIGN KEY (metric) REFERENCES public.metric(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."poll_option"
    ADD CONSTRAINT "poll_option_poll_id_fkey" FOREIGN KEY (poll_id) REFERENCES public.poll(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."poll"
    ADD CONSTRAINT "poll_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.profiles(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."poll_vote"
    ADD CONSTRAINT "poll_vote_poll_option_id_fkey" FOREIGN KEY (poll_option_id) REFERENCES public.poll_option(id) ON DELETE CASCADE;

ALTER TABLE ONLY "public"."poll_vote"
    ADD CONSTRAINT "poll_vote_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id);

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;

CREATE POLICY "Enable delete for users based on user_id" ON "public"."comment_like" FOR DELETE USING ((auth.uid() = user_id));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."announcement" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."comment" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."comment_like" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."comment_spam" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."discussion" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."information" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."metric" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."metric_value" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."poll" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."poll_option" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."poll_vote" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."ritual" FOR INSERT TO authenticated WITH CHECK (true);

CREATE POLICY "Enable read access for all users" ON "public"."announcement" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."comment" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."comment_like" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."comment_spam" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."discussion" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."information" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."metric" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."metric_value" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."poll" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."poll_option" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."poll_vote" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."ritual" FOR SELECT USING (true);

ALTER TABLE "public"."announcement" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."comment" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."comment_like" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."comment_spam" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."discussion" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."information" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."metric" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."metric_value" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."poll" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."poll_option" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."poll_vote" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."ritual" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."notify_users_on_poll_update"() TO "anon";
GRANT ALL ON FUNCTION "public"."notify_users_on_poll_update"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."notify_users_on_poll_update"() TO "service_role";

GRANT ALL ON TABLE "public"."comment" TO "anon";
GRANT ALL ON TABLE "public"."comment" TO "authenticated";
GRANT ALL ON TABLE "public"."comment" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Comment_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Comment_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Comment_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."discussion" TO "anon";
GRANT ALL ON TABLE "public"."discussion" TO "authenticated";
GRANT ALL ON TABLE "public"."discussion" TO "service_role";

GRANT ALL ON SEQUENCE "public"."Discussion_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Discussion_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Discussion_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."announcement" TO "anon";
GRANT ALL ON TABLE "public"."announcement" TO "authenticated";
GRANT ALL ON TABLE "public"."announcement" TO "service_role";

GRANT ALL ON SEQUENCE "public"."announcement_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."announcement_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."announcement_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."comment_like" TO "anon";
GRANT ALL ON TABLE "public"."comment_like" TO "authenticated";
GRANT ALL ON TABLE "public"."comment_like" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comment_like_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comment_like_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comment_like_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."comment_spam" TO "anon";
GRANT ALL ON TABLE "public"."comment_spam" TO "authenticated";
GRANT ALL ON TABLE "public"."comment_spam" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comment_spam_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comment_spam_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comment_spam_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."information" TO "anon";
GRANT ALL ON TABLE "public"."information" TO "authenticated";
GRANT ALL ON TABLE "public"."information" TO "service_role";

GRANT ALL ON SEQUENCE "public"."information_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."information_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."information_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."metric" TO "anon";
GRANT ALL ON TABLE "public"."metric" TO "authenticated";
GRANT ALL ON TABLE "public"."metric" TO "service_role";

GRANT ALL ON SEQUENCE "public"."metric_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."metric_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."metric_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."metric_value" TO "anon";
GRANT ALL ON TABLE "public"."metric_value" TO "authenticated";
GRANT ALL ON TABLE "public"."metric_value" TO "service_role";

GRANT ALL ON SEQUENCE "public"."metric_value_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."metric_value_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."metric_value_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."poll" TO "anon";
GRANT ALL ON TABLE "public"."poll" TO "authenticated";
GRANT ALL ON TABLE "public"."poll" TO "service_role";

GRANT ALL ON SEQUENCE "public"."poll_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."poll_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."poll_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."poll_option" TO "anon";
GRANT ALL ON TABLE "public"."poll_option" TO "authenticated";
GRANT ALL ON TABLE "public"."poll_option" TO "service_role";

GRANT ALL ON SEQUENCE "public"."poll_options_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."poll_options_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."poll_options_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."poll_vote" TO "anon";
GRANT ALL ON TABLE "public"."poll_vote" TO "authenticated";
GRANT ALL ON TABLE "public"."poll_vote" TO "service_role";

GRANT ALL ON SEQUENCE "public"."poll_votes_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."poll_votes_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."poll_votes_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."ritual" TO "anon";
GRANT ALL ON TABLE "public"."ritual" TO "authenticated";
GRANT ALL ON TABLE "public"."ritual" TO "service_role";

GRANT ALL ON SEQUENCE "public"."ritual_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ritual_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ritual_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
